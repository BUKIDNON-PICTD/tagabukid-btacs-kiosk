/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/
package tagabukid.btacs.views;

import com.jaspersoft.jasperserver.jaxrs.client.apiadapters.reporting.ReportOutputFormat;
import com.jaspersoft.jasperserver.jaxrs.client.core.JasperserverRestClient;
import com.jaspersoft.jasperserver.jaxrs.client.core.RestClientConfiguration;
import com.jaspersoft.jasperserver.jaxrs.client.core.enums.AuthenticationType;
import com.jaspersoft.jasperserver.jaxrs.client.core.enums.JRSVersion;
import com.jaspersoft.jasperserver.jaxrs.client.core.enums.MimeType;
import com.jaspersoft.jasperserver.jaxrs.client.core.operationresult.OperationResult;
import com.rameses.rcp.common.MsgBox;
import com.rameses.rcp.common.PropertySupport;
import com.rameses.rcp.framework.Binding;
import com.rameses.rcp.ui.UIControl;
import com.rameses.rcp.util.UIControlUtil;
import java.awt.BorderLayout;
import java.io.InputStream;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import org.icepdf.ri.common.ComponentKeyBinding;
import org.icepdf.ri.common.SwingController;
import org.icepdf.ri.common.SwingViewBuilder;
import com.rameses.rcp.common.DocViewModel;
import java.util.HashMap;
import java.util.Map;

/**
 *
 * @author rufino
 */
public class PDFViewerComponent extends JPanel implements UIControl {
    private Binding binding;
    private String[] depends;
    private int index;
    private int stretchWidth;
    private int stretchHeight;
    /**
     * Creates new form PDFViewerComponent
     */
    
    private JPanel viewerComponentPanel = new JPanel();
    private SwingController controller = new SwingController();
    private final JPanel panel = new JPanel(new BorderLayout());
    private DocViewModel docModel;
    
    public PDFViewerComponent() {
        initComponents();
        //String filePath = "C:\\Users\\rufino\\Desktop\\training.pdf";
        createViewer();
        
        panel.add(viewerComponentPanel, BorderLayout.CENTER);
        setLayout(new BorderLayout());
        add(panel, BorderLayout.CENTER);
//        controller.openDocument(filePath);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 471, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 362, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void createViewer(){
        SwingViewBuilder factory = new SwingViewBuilder(controller);
        viewerComponentPanel = factory.buildViewerPanel();
        ComponentKeyBinding.install(controller, viewerComponentPanel);
        controller.getDocumentViewController().setAnnotationCallback(
                new org.icepdf.ri.common.MyAnnotationCallback(
                        controller.getDocumentViewController()));
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    @Override
    public void load() {
        
    }
    
    
    @Override
    public void refresh() {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                getPDF();
            }
        });
    }
    
    private void getPDF(){
//         DocViewModel newModel = null;
        try
        {
            Object value = UIControlUtil.getBeanValue(this);
            RestClientConfiguration configuration = new RestClientConfiguration("http://172.16.2.50:8060/jasperserver");
            configuration.setAcceptMimeType(MimeType.JSON).setContentMimeType(MimeType.JSON).setJrsVersion(JRSVersion.v5_1_0).setLogHttp(true);
            configuration.setAuthenticationType(AuthenticationType.BASIC);
            JasperserverRestClient client = new JasperserverRestClient(configuration);
            Map items = new HashMap();
            items.putAll((Map)value);
            OperationResult<InputStream> result = client
                    .authenticate("jasperdtr", "jasperdtr")
                    .reportingService()
                    .report("/dtr/dtr1_3_2_1_1_1_4_4")
                    .prepareForRun(ReportOutputFormat.PDF, 1)
                    .parameter("DEPARTMENT_ID",(String)items.get("DEPARTMENT_ID"))
                    .parameter("UserId",(String)items.get("UserId"))
                    .parameter("DTR_MONTH",(String)items.get("DTR_MONTH"))
                    .parameter("DTR_YEAR",(String)items.get("DTR_YEAR"))
                    .parameter("Supervisor",(String)items.get("Supervisor"))
                    .parameter("Type",(String)items.get("Type"))
                    .run();
            InputStream report = result.getEntity();
            controller.openDocument(report,"","");
        }
        catch (Exception ex)
        {
            MsgBox.err(ex);
        }
    }
    
    @Override
    public Binding getBinding() {
        return this.binding; //To change body of generated methods, choose Tools | Templates.
    }
    
    @Override
    public void setBinding(Binding binding) {
        this.binding = binding; //To change body of generated methods, choose Tools | Templates.
    }
    
    
    public String[] getDepends() {
        return this.depends = depends; //To change body of generated methods, choose Tools | Templates.
    }
    
    
    public int getIndex() {
        return this.index = index; //To change body of generated methods, choose Tools | Templates.
    }
    
    public void setPropertyInfo(PropertySupport.PropertyInfo info) {
        
    }
    
    
    public int getStretchWidth() {
        return this.stretchWidth; //To change body of generated methods, choose Tools | Templates.
    }
    
    
    public void setStretchWidth(int stretchWidth) {
        this.stretchWidth = stretchWidth; //To change body of generated methods, choose Tools | Templates.
    }
    
    
    public int getStretchHeight() {
        return this.stretchHeight; //To change body of generated methods, choose Tools | Templates.
    }
    
    
    public void setStretchHeight(int stretchHeight) {
        this.stretchHeight = stretchHeight; //To change body of generated methods, choose Tools | Templates.
    }
    
    
    public int compareTo(Object o) {
        return UIControlUtil.compare(this, o); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getVisibleWhen() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setVisibleWhen(String string) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    
}
